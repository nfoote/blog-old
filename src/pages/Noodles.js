/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useState, useMemo, useRef } from 'react'
import { useThree, useLoader } from '@react-three/fiber'
import { useGLTF, Float } from '@react-three/drei'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { LayerMaterial, Base, Depth, Fresnel, Noise } from 'lamina'
import { Sphere } from '@react-three/drei'
import { Physics, useBox, usePlane, useSphere } from "@react-three/cannon";



const colorA = new THREE.Color('#2032A5').convertSRGBToLinear()
const colorB = new THREE.Color('#0F1C4D').convertSRGBToLinear()
const colorA2 = new THREE.Color('#fec5da').convertSRGBToLinear()
const colorB2 = new THREE.Color('#00b8fe').convertSRGBToLinear()
const fresnel = new THREE.Color('#bf7b7b').convertSRGBToLinear()
// const material = new LayerMaterial({
//   layers: [
//     new Base({ color: colorA }),
//     new Depth({ colorA: colorA, colorB: colorB, alpha: 0.5, mode: 'normal', near: 0, far: 2, origin: [1, 1, 1] }),
//     new Depth({ colorA: 'purple', colorB: colorB, alpha: 0.5, mode: 'add', near: 3, far: 2, origin: [1, 1, 1] }),
//     new Fresnel({ mode: 'add', color: fresnel, intensity: 0.3, power: 2.5, bias: 0.0 }),
//     new Noise({ mapping: 'local', type: 'simplex', scale: 1000, colorA: '#ffaf40', colorB: 'black', mode: 'overlay' })
//   ]
// })

function Noodle() {
  const { viewport, camera } = useThree()
  // const { nodes } = useGLTF('/worms-transformed.glb')
  // const [geometry] = useState(() => nodes[`noodle_${Math.ceil(Math.random() * 4)}`].geometry)
  const [speed] = useState(() => 0.1 + Math.random() / 10)
  const sphereRef = useRef()
  const layerRef = useRef()


  const [ref, api] = useSphere(() => ({ mass: 5, position: [0, 5, 0],  }))

  const handlePointerEnter = e => {
    //console.log(material.layers)
    //sphereRef.current.position.y += 2; 

   //api.mass= 1;
   //api.mass.set(1)
  }

  const position = useMemo(() => {
    const z = Math.random() * -30
    const y = Math.random() * -30

    const bounds = viewport.getCurrentViewport(camera, [0, y, z])
    return [THREE.MathUtils.randFloatSpread(bounds.width), THREE.MathUtils.randFloatSpread(bounds.height * 0.75), z]
  }, [viewport])


  return (
    <Float position={position} speed={speed} rotationIntensity={10} floatIntensity={40} dispose={null}>
       <directionalLight intensity={0.1} />

       <Sphere
        castShadow
        //material={material}
        onPointerEnter={(e) => handlePointerEnter(e)}
        onClick={() => api.mass.set(1000)}
        // onPointerEnter={(e) => api.applyLocalForce([0, 0, -50], [0, 0, 0])}
        // onPointerLeave={() => (strength.current = 0)}
        ref={ref}
        args={[0.4, 128, 128]}
      > 
       <LayerMaterial
          ref={layerRef}
          color={'#ffffff'}
          lighting={'physical'} 
          transmission={1}
          roughness={0.1}
          thickness={2}
        >
         <Depth
            near={0.4854}
            far={0.7661999999999932}
            origin={[-0.4920000000000004, 0.4250000000000003, 0]}
            colorA={colorA}
            colorB={colorB}
          />
          {/* <Displace ref={displaceRef} strength={0} scale={5} offset={[0.09189000000357626, 0, 0]} /> */}
          <Fresnel
            color={'#fefefe'}
            bias={-0.3430000000000002}
            intensity={3.8999999999999946}
            power={3.3699999999999903}
            factor={1.119999999999999}
            mode={'screen'}
          />
        </LayerMaterial>
      </Sphere> 

    </Float>
  )
}


export default function Noodles() {
  return Array.from({ length: 25 }, (_, i) => <Noodle key={i} />)
}

useGLTF.preload('/worm-transformed.glb')
